plugins {
    id 'net.ltgt.errorprone' version "${errorpronePluginVersion}"
    id "com.github.spotbugs" version "${spotbugsPluginVersion}"
}

apply plugin:'application'
startScripts.enabled = false

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCompileOnly.extendsFrom testCompileOnly
}

dependencies {
    implementation project(':client')
    implementation project(':generic-contracts')
    implementation project(':ledger') // to use JacksonBasedContract
    implementation group: 'info.picocli', name: 'picocli', version: "${picoCliVersion}"
    implementation group: 'org.partiql', name: 'partiql-parser', version: "${partiqlVersion}"

    // for test
    testImplementation project(':common-test')
    integrationTestImplementation project(':common-test')
    integrationTestImplementation group: 'com.scalar-labs', name: 'scalardb-schema-loader', version: "${scalarDbVersion}"

    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"

    // for SpotBugs
    spotbugs "com.github.spotbugs:spotbugs:${spotbugsVersion}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
}

task HashStore(type: CreateStartScripts) {
    mainClass = 'com.scalar.dl.hashstore.client.tool.HashStoreCommandLine'
    applicationName = 'scalardl-hashstore'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

applicationDistribution.into('bin') {
    from(HashStore)
    fileMode = 0755
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description 'Runs the integration tests.'
    group 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // ensures integration tests are run every time when called
    shouldRunAfter test
    options {
        systemProperties(System.getProperties().findAll{it.key.toString().startsWith("scalar")})
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat('1.7')
    }
}

spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    effort = 'default'
    reportLevel = 'default'
    maxHeapSize = '1g'
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=en' ]
}

spotbugsMain.reports {
    html.enabled = true
}

spotbugsTest.reports {
    html.enabled = true
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    title = "ScalarDL HashStore Java Client SDK ${version}"
    source += sourceSets.main.java
    source += project(':client').sourceSets.main.java
    source += project(':common').sourceSets.main.java
    include "com/scalar/dl/hashstore/**"
    include "com/scalar/dl/client/exception/*.java"
    include "com/scalar/dl/ledger/model/*.java"
}

distZip {
    archiveFileName = "scalardl-hashstore-java-client-sdk-${project.version}.zip"
}

archivesBaseName = "scalardl-hashstore-java-client-sdk"

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
    (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
     project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
